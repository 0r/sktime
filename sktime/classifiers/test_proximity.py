import numpy as np
from numpy import testing

from .proximity import ProximityForest, ProximityStump, ProximityTree
from ..datasets import load_gunpoint


def run_classifier_on_dataset(classifier, dataset_loader,
                              expected_predict_probas,
                              expected_predictions):
    X_train, y_train = dataset_loader(split = 'TRAIN', return_X_y = True)
    X_test, y_test = dataset_loader(split = 'TEST', return_X_y = True)
    classifier.fit(X_train, y_train)
    predict_probas = classifier.predict_proba(X_test)
    testing.assert_array_equal(predict_probas, expected_predict_probas)
    predictions = classifier.predict(X_test)
    testing.assert_array_equal(predictions, expected_predictions)


def test_proximity_forest_on_gunpoint():
    classifier = ProximityForest(debug = True, random_state = 0, num_trees = 10, num_stump_evaluations = 5)
    run_classifier_on_dataset(classifier, load_gunpoint,
                              np.array([[0.9,0.1]
,[0.2,0.8]
,[0.,1.,]
,[0.9,0.1]
,[1.,0.,]
,[0.2,0.8]
,[0.9,0.1]
,[0.1,0.9]
,[0.1,0.9]
,[0.9,0.1]
,[0.5,0.5]
,[0.8,0.2]
,[0.3,0.7]
,[0.8,0.2]
,[0.8,0.2]
,[0.6,0.4]
,[0.7,0.3]
,[0.3,0.7]
,[0.2,0.8]
,[0.1,0.9]
,[0.9,0.1]
,[0.2,0.8]
,[1.,0.,]
,[1.,0.,]
,[1.,0.,]
,[0.3,0.7]
,[0.8,0.2]
,[0.8,0.2]
,[0.3,0.7]
,[0.8,0.2]
,[0.7,0.3]
,[0.1,0.9]
,[0.2,0.8]
,[0.8,0.2]
,[0.7,0.3]
,[0.9,0.1]
,[0.9,0.1]
,[0.6,0.4]
,[0.9,0.1]
,[0.4,0.6]
,[0.9,0.1]
,[0.1,0.9]
,[0.7,0.3]
,[0.7,0.3]
,[0.1,0.9]
,[0.8,0.2]
,[0.2,0.8]
,[0.4,0.6]
,[0.6,0.4]
,[0.1,0.9]
,[0.2,0.8]
,[0.1,0.9]
,[0.8,0.2]
,[0.2,0.8]
,[0.9,0.1]
,[1.,0.,]
,[0.2,0.8]
,[0.1,0.9]
,[0.9,0.1]
,[0.3,0.7]
,[0.8,0.2]
,[0.2,0.8]
,[0.8,0.2]
,[0.4,0.6]
,[0.,1.,]
,[0.7,0.3]
,[0.9,0.1]
,[0.1,0.9]
,[0.1,0.9]
,[0.2,0.8]
,[0.,1.,]
,[0.1,0.9]
,[0.3,0.7]
,[0.2,0.8]
,[0.2,0.8]
,[0.1,0.9]
,[0.1,0.9]
,[0.,1.,]
,[0.1,0.9]
,[0.9,0.1]
,[0.9,0.1]
,[0.9,0.1]
,[0.,1.,]
,[0.,1.,]
,[0.1,0.9]
,[0.,1.,]
,[0.9,0.1]
,[0.3,0.7]
,[0.8,0.2]
,[0.6,0.4]
,[0.7,0.3]
,[0.2,0.8]
,[0.8,0.2]
,[0.2,0.8]
,[0.4,0.6]
,[0.8,0.2]
,[0.1,0.9]
,[0.1,0.9]
,[0.9,0.1]
,[0.7,0.3]
,[0.1,0.9]
,[1.,0.,]
,[1.,0.,]
,[0.2,0.8]
,[0.2,0.8]
,[0.8,0.2]
,[0.8,0.2]
,[0.2,0.8]
,[0.7,0.3]
,[0.2,0.8]
,[0.1,0.9]
,[0.1,0.9]
,[0.7,0.3]
,[0.2,0.8]
,[0.9,0.1]
,[0.8,0.2]
,[0.2,0.8]
,[1.,0.,]
,[0.8,0.2]
,[0.1,0.9]
,[0.9,0.1]
,[0.2,0.8]
,[0.1,0.9]
,[0.1,0.9]
,[0.9,0.1]
,[0.1,0.9]
,[0.9,0.1]
,[0.6,0.4]
,[0.1,0.9]
,[0.1,0.9]
,[0.1,0.9]
,[0.1,0.9]
,[0.9,0.1]
,[0.5,0.5]
,[0.7,0.3]
,[0.,1.,]
,[0.8,0.2]
,[0.1,0.9]
,[0.8,0.2]
,[0.7,0.3]
,[0.2,0.8]
,[0.4,0.6]
,[0.8,0.2]
,[0.,1.,]
,[0.8,0.2]
,[0.2,0.8]
,[0.6,0.4]
,[0.2,0.8]
,[0.,1.,]
,[0.7,0.3]]),
                              np.array(['1','2','2','1','1','2','1','2','2','1','2','1','2','1','1','1','1','2'
,'2','2','1','2','1','1','1','2','1','1','2','1','1','2','2','1','1','1'
,'1','1','1','2','1','2','2','1','2','1','2','2','1','2','2','2','1','2'
,'1','1','2','2','1','2','1','2','1','2','2','1','1','2','2','2','2','2'
,'2','2','2','2','2','2','2','1','1','1','2','2','2','2','1','2','1','1'
,'1','2','1','2','2','1','2','2','1','1','2','1','1','2','2','1','1','2'
,'1','2','2','2','1','2','1','1','2','1','1','2','1','2','2','2','1','2'
,'1','1','2','2','2','2','1','1','1','2','1','2','1','1','2','1','1','2'
,'1','2','1','2','2','1']))


def test_proximity_tree_on_gunpoint():
    classifier = ProximityTree(debug = True, random_state = 0)
    run_classifier_on_dataset(classifier, load_gunpoint,
                              np.array([[1,0]
,[0,1]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[1,0]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[1,0]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[1,0]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]
,[0,1]
,[1,0]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[0,1]
,[1,0]]),
                              np.array(
                                      ['1', '2', '2', '1', '2', '2', '1', '2', '2', '1', '2', '1', '1', '1', '1', '2',
                                       '2', '2'
                                              , '2', '2', '1', '1', '2', '2', '2', '1', '2', '1', '2', '2', '1', '2',
                                       '2', '2', '2', '1'
                                              , '2', '1', '1', '2', '2', '1', '1', '2', '2', '1', '1', '2', '1', '2',
                                       '1', '1', '1', '2'
                                              , '1', '1', '1', '2', '1', '1', '1', '1', '2', '1', '2', '2', '2', '2',
                                       '2', '2', '2', '2'
                                              , '2', '2', '2', '2', '2', '2', '2', '1', '2', '2', '2', '2', '2', '2',
                                       '2', '2', '1', '1'
                                              , '2', '2', '2', '2', '2', '1', '2', '2', '2', '1', '2', '1', '2', '2',
                                       '2', '1', '1', '2'
                                              , '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '2',
                                       '2', '1', '1', '2'
                                              , '1', '2', '2', '1', '2', '2', '1', '2', '2', '2', '1', '2', '2', '2',
                                       '1', '2', '2', '2'
                                              , '1', '2', '1', '2', '2', '1']))


def test_proximity_stump_on_gunpoint():
    classifier = ProximityStump(debug = True, random_state = 0)
    run_classifier_on_dataset(classifier, load_gunpoint,
                              np.array([[0.10603769,0.89396231]
,[0.95612597,0.04387403]
,[0.30512484,0.69487516]
,[0.14592347,0.85407653]
,[0.90752148,0.09247852]
,[0.95978888,0.04021112]
,[0.10055315,0.89944685]
,[0.06255971,0.93744029]
,[0.68263976,0.31736024]
,[0.90927714,0.09072286]
,[0.91086208,0.08913792]
,[0.10904116,0.89095884]
,[0.94248757,0.05751243]
,[0.10620615,0.89379385]
,[0.13523152,0.86476848]
,[0.87655708,0.12344292]
,[0.93242229,0.06757771]
,[0.83604338,0.16395662]
,[0.84020253,0.15979747]
,[0.91882515,0.08117485]
,[0.21833725,0.78166275]
,[0.06448131,0.93551869]
,[0.89303251,0.10696749]
,[0.91759596,0.08240404]
,[0.20178317,0.79821683]
,[0.08326975,0.91673025]
,[0.10013396,0.89986604]
,[0.09998561,0.90001439]
,[0.78824049,0.21175951]
,[0.84210798,0.15789202]
,[0.94829549,0.05170451]
,[0.07704005,0.92295995]
,[0.06983075,0.93016925]
,[0.92348658,0.07651342]
,[0.93314063,0.06685937]
,[0.75241759,0.24758241]
,[0.85309127,0.14690873]
,[0.83421624,0.16578376]
,[0.24933427,0.75066573]
,[0.82448205,0.17551795]
,[0.92448914,0.07551086]
,[0.21112969,0.78887031]
,[0.8419911,0.1580089,]
,[0.8763597,0.1236403,]
,[0.15028692,0.84971308]
,[0.08355148,0.91644852]
,[0.10938323,0.89061677]
,[0.80181167,0.19818833]
,[0.9519229,0.0480771,]
,[0.69539693,0.30460307]
,[0.76664644,0.23335356]
,[0.0827345,0.9172655,]
,[0.83201974,0.16798026]
,[0.17060793,0.82939207]
,[0.9166427,0.0833573,]
,[0.08724156,0.91275844]
,[0.06365603,0.93634397]
,[0.95260505,0.04739495]
,[0.83148527,0.16851473]
,[0.96312654,0.03687346]
,[0.09115939,0.90884061]
,[0.29678867,0.70321133]
,[0.10541232,0.89458768]
,[0.77866943,0.22133057]
,[0.8474353,0.1525647,]
,[0.81783278,0.18216722]
,[0.16719827,0.83280173]
,[0.90636989,0.09363011]
,[0.94445323,0.05554677]
,[0.95434653,0.04565347]
,[0.918434,0.081566,]
,[0.92663157,0.07336843]
,[0.80715567,0.19284433]
,[0.03861684,0.96138316]
,[0.04729924,0.95270076]
,[0.95006779,0.04993221]
,[0.9392125,0.0607875]
,[0.22673951,0.77326049]
,[0.07200896,0.92799104]
,[0.91528762,0.08471238]
,[0.08574487,0.91425513]
,[0.09135416,0.90864584]
,[0.24896054,0.75103946]
,[0.94257763,0.05742237]
,[0.94034082,0.05965918]
,[0.95664245,0.04335755]
,[0.08436953,0.91563047]
,[0.84891329,0.15108671]
,[0.94808673,0.05191327]
,[0.90543157,0.09456843]
,[0.96064191,0.03935809]
,[0.05448508,0.94551492]
,[0.84231107,0.15768893]
,[0.07487156,0.92512844]
,[0.95876114,0.04123886]
,[0.95317701,0.04682299]
,[0.94863512,0.05136488]
,[0.05294607,0.94705393]
,[0.10500794,0.89499206]
,[0.8715117,0.1284883]
,[0.07016382,0.92983618]
,[0.16705494,0.83294506]
,[0.10593164,0.89406836]
,[0.75554589,0.24445411]
,[0.84519285,0.15480715]
,[0.80025832,0.19974168]
,[0.89517784,0.10482216]
,[0.24534024,0.75465976]
,[0.95006709,0.04993291]
,[0.94865809,0.05134191]
,[0.89925278,0.10074722]
,[0.93305554,0.06694446]
,[0.09658524,0.90341476]
,[0.05697547,0.94302453]
,[0.83281339,0.16718661]
,[0.1487178,0.8512822]
,[0.06845857,0.93154143]
,[0.14878715,0.85121285]
,[0.92389965,0.07610035]
,[0.07349111,0.92650889]
,[0.16280508,0.83719492]
,[0.10363107,0.89636893]
,[0.94810099,0.05189901]
,[0.25546735,0.74453265]
,[0.09284648,0.90715352]
,[0.13842327,0.86157673]
,[0.13944427,0.86055573]
,[0.7858023,0.2141977]
,[0.05750263,0.94249737]
,[0.25726564,0.74273436]
,[0.05661537,0.94338463]
,[0.88585365,0.11414635]
,[0.15912009,0.84087991]
,[0.94489914,0.05510086]
,[0.11561221,0.88438779]
,[0.19642215,0.80357785]
,[0.09701805,0.90298195]
,[0.84744382,0.15255618]
,[0.10148506,0.89851494]
,[0.80471161,0.19528839]
,[0.17920763,0.82079237]
,[0.13946282,0.86053718]
,[0.93368812,0.06631188]
,[0.28778789,0.71221211]
,[0.9243043,0.0756957]
,[0.95761305,0.04238695]
,[0.84774116,0.15225884]
,[0.89120277,0.10879723]
,[0.10810414,0.89189586]
,[0.09128199,0.90871801]]),
                              np.array(['2','1','2','2','1','1','2','2','1','1','1','2','1','2','2','1','1','1'
,'1','1','2','2','1','1','2','2','2','2','1','1','1','2','2','1','1','1'
,'1','1','2','1','1','2','1','1','2','2','2','1','1','1','1','2','1','2'
,'1','2','2','1','1','1','2','2','2','1','1','1','2','1','1','1','1','1'
,'1','2','2','1','1','2','2','1','2','2','2','1','1','1','2','1','1','1'
,'1','2','1','2','1','1','1','2','2','1','2','2','2','1','1','1','1','2'
,'1','1','1','1','2','2','1','2','2','2','1','2','2','2','1','2','2','2'
,'2','1','2','2','2','1','2','1','2','2','2','1','2','1','2','2','1','2'
,'1','1','1','1','2','2']))
